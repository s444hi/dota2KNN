import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier, NearestCentroid
from sklearn.model_selection import train_test_split
from sklearn.inspection import DecisionBoundaryDisplay
from sklearn.metrics import accuracy_score

from google.colab import drive
drive.mount('/content/drive')

url = 'https://docs.google.com/spreadsheets/d/1GT0vNzFgCKWwnXHrz3ruC71f8W2qWxJ7nLNMGsfQlMY/export?format=csv'
df = pd.read_csv(url)

df.head()

X = df.iloc[:, :-1]
y = df.iloc[:, -1].astype(int)

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

fig, axes = plt.subplots(1, 4, figsize=(12, 3))

for i in range(4):
  axes[i].hist(df.iloc[:,i], color='navy')
  axes[i].set_title(f"feature {i}")

  fig.tight_layout()

fig, axes = plt.subplots(4,4,figsize=(8,8))

for i in range(4):
    for j in range(4):
        axes[i, j].set_xlabel(f"feature {i}")
        axes[i, j].set_ylabel(f"feature {j}")

        if j == i:
            axes[i, j].hist(df.iloc[:, i], color='navy')
        else:
            for k in range(len(df)):
                if df.iloc[k]['Hero'] == 1:
                    axes[i, j].scatter(df.iloc[k, j], df.iloc[k, i], color='maroon', s=10)
                elif df.iloc[k]['Hero'] == 2:
                    axes[i, j].scatter(df.iloc[k, j], df.iloc[k, i], color='navy', s=10)
                else:
                    axes[i, j].scatter(df.iloc[k, j], df.iloc[k, i], color='orange', s=10)

fig.tight_layout()

seed = 1234
np.random.seed(seed)
Xtr, Xte, Ytr, Yte = train_test_split(X_scaled, y, test_size=0.7, random_state=seed, shuffle=True)

NC = NearestCentroid()
NC.fit(Xtr, Ytr)
Pred_tr = NC.predict(Xtr)
Pred_te = NC.predict(Xte)
Accuracy_tr = accuracy_score(Ytr, Pred_tr)
Accuracy_te = accuracy_score(Yte, Pred_te)

print(f"-- accuracy (train): {Accuracy_tr}")
print(f"-- accuracy (test): {Accuracy_te}")

// -- accuracy (train): 0.8648648648648649
// -- accuracy (test): 0.8160919540229885

plot_kwargs = {'cmap' : 'viridis',
               'response_method' : 'predict',
               'plot_method' : 'pcolormesh',
               'shading' : 'auto',
               'alpha' : 0.6,
               'grid_resolution' : 100}

figure, axes = plt.subplots(2, 2, figsize=(10, 10))

k_vals = [1, 5, 10, 37] 
for i, k in enumerate(k_vals):
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(Xtr[:, :2], Ytr)

    DecisionBoundaryDisplay.from_estimator(knn, Xtr[:, :2], ax=axes[i // 2, i % 2], **plot_kwargs)
    axes[i // 2, i % 2].scatter(Xtr[:, 0], Xtr[:, 1], c=Ytr, edgecolor='k', s=12)
    axes[i // 2, i % 2].set_title(f"k: {k}")

plt.tight_layout()
plt.show()
